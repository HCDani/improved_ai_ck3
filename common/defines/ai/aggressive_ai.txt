NAI = {
	THREAT_MIN_STRENGTH_RATIO = 0.5						# Only consider threats above this ratio
	THREAT_CLAIM_TIER_MULTIPLIER = 50					# Multiplied with each claim's tier squared
	THREAT_DE_JURE_CLAIM_MULTIPLIER = 250				# Multiplied de jure claim
	THREAT_STRENGTH_NEIGHBOUR_RATIO_MULTIPLIER = 100	# Multiplied with the strength ratio
	THREAT_STRENGTH_RATIO_MULTIPLIER = 50
	AI_WAR_COOLDOWN_RATIO_FOR_FULL_CHANCE = 0	

	AI_BASE_WAR_CHANCE = 50								# Basic chance of declaring war. Further reduced by energy; x0 at -100, x1 at 100, x0.5 at 0 energy
	AI_WAR_BASE_COOLDOWN = 50							# How long, in days, does the AI have to wait between wars?
	AI_WAR_MAX_OFFENSIVE_WAR_PENALTY = 0.0				# If your offensive war penalty is higher than this, don't declare war unless you're a warmonger (faith doctrine) or irrational
	AI_WAR_MIN_RATIONALITY_FOR_OFFENSIVE_WAR_PENALTY = -30	# At or below this value, the AI will declare war even if their offensive war penalty is high
	MIN_SCORE_RATIO_FOR_CASUS_BELLI = 0.9				# The AI will never declare a war below this ratio of the best war it has available

	CB_SCORE_MULT_NEIGHBOR_TITLE = 15					# The AI will multiply the score of neighboring titles taken by a CB by this much

	CB_TARGET_MAX_STRENGTH = 6.0						# AI won't look for CB:s against anyone stronger than this. Used by independent rulers.
	CB_TARGET_MAX_STRENGTH_VASSAL = 4.0					# AI won't look for CB:s against anyone stronger than this. Used by vassal rulers.
	
	CB_TARGET_AT_PEACE_STRENGTH_RATIO_MAX = 1.2			# AI won't declare a war on someone stronger than this if they are at peace
	CB_TARGET_AT_WAR_STRENGTH_RATIO_MAX = 3			# AI won't declare a war on someone stronger than this if they are already at war

	ENEMY_MAX_STRENGTH_MULTIPLIER = 1.5					# Only consider enemies equal or below this ratio
	
	CB_TARGET_AT_WAR_STRENGTH_RATIO_PER_WAR = 0.5
	CB_TARGET_STRENGTH_RATIO_BOLDNESS = 0.5
	
	CB_OPINION_OF_TARGET_MULTIPLIER = 0.1					# Multiplier for opinion of target 
	CB_OPINION_OF_CLAIMANT_MULTIPLIER = 0.1				# Multiplier for opinion of claimant (if claimant is the AI, we use MAX_OPINION)	
	
	ENEMY_COMBAT_STRENGTH_MULTIPLIER = 1.1				# The AI will take its estimated enemy strength times this multiplier
	
	TARGET_MAX_DEFENSIVE_WARS = 10
	DESIRED_WAR_SIDE_STRENGTH = 1.25					# AI won't call in more allies if its side in a war has at least this ratio of troops compared to the enemy. Uses current strength for own side, max strength for enemy side

	MONTHS_OF_MAINTENANCE_IN_WAR_CHEST = 18
	CHASE_MIN_SIZE = 500								# The AI will not bother trying to chase armies smaller than this
	CHASE_PRIMARY_ENEMY_MIN_SCORE = 0.75				# Score is between 0.0 and 1.0 and represents the percentage of the enemy's total strength the target unit contains. If led by the primary enemy, the score is capped to this minimum
	CHASE_PRIMARY_ENEMY_SOLDIER_MODIFIER = 2.0			# Modifies the number of target unit soldiers when considering if it's worth taking hostile attrition to attack it. I.e. AI won't attack a unit with 200 if it loses more by moving there
	CHASE_MAX_SPEED_DIFFERENCE = 0.2					# Ignore chasing units that are this much faster unless adjacent
	COMBAT_RATIO_THRESHOLD = 0.5						# The AI will consider it valid to enter provinces where the predicted combat ratio compared to nearby enemies is above this value
	COMBAT_RATIO_THRESHOLD_DESPERATE = 0.4				# When in desperate mode, the AI will consider it valid to enter provinces where the predicted combat ratio compared to nearby enemies is above this value

	
	RAISE_LEVIES_COOLDOWN = 180							# Number of days before the AI tries to raise levies if it already has an army
	RAISE_TROOPS_MIN_RATIO_OF_SELF = 0.3				# If the AI doesn't have troops raised, it won't raise them unless the troops amount to at least this much compared to its max troops
	RAISE_TROOPS_MIN_RATIO_OF_ENEMY = 0.5				# Or this much compared to its enemy
	MURDER_BASE_CHANCE = 30								# Chance of the AI starting a murder scheme against a valid target
	
	ASK_FOR_HELP_COMBAT_PREDICTION_RATIO = 1.1			# Below this combat prediction ratio the AI will try to call in more troops
	ASK_FOR_HELP_OTHER_STACK_TROOPS_RATIO = 1.5			# The incoming enemies
	RETREAT_COMBAT_PREDICTION_RATIO = 0.45				# Below this combat prediction ratio the AI will retreat
	RETREAT_TO_BETTER_TERRAIN_DISTANCE = 2				# The AI will retreat to better terrain this many provinces away (might do another retreat once it gets there)
	RETREAT_IF_MISSING_STRENGTH = 0.25					# The AI will retreat if it has this many troops elsewhere compared to the potentially retreating army. E.G., if 2000 men are considered for retreat, it'll do so if there's at least 0.25 * 2000 = 500 men elsewhere
	STAND_AND_FIGHT_DAYS = 30							# If the AI decides to stand still so the other party can kill it on defensible terrain, it'll start doing regular orders again after this many days if death is not forthcoming
	STAND_AND_FIGHT_COOLDOWN_DAYS = 45					# If the AI abandons "stand and fight" due to the above, it'll avoid "stand and fight" for this many days
	MIN_SUPPLY_COMPARED_TO_AVERAGE_SUPPLY_FACTOR = 0.7	# For the purpose of army sizes, the AI uses the highest of this factor times the average supply in the war area, and the lowest supply in the war area. E.G., if average supply is 2k, and lowest supply is 1k, the AI will act as if available supply is 0.7 * 2k = 1.4k. But if the lowest supply was 1.5k, it'd be using that instead

	REDUCED_EFFECTIVE_WEALTH_PER_HIRED_MERC = 100		# For each hired merc, the AI pretends to have less money so that it ends up keeping some reserves
	MAX_WEALTH_EXPENDITURE_MERCS = 0.8					# The AI will never spend more than this fraction of its current wealth on buying mercs
	MERC_OVERMATCHING_TARGET = 1.7						# The AI will try to outnumber the enemy by this ratio if it can afford it based on its warchest
	MAX_WAR_CHEST_EXPENDITURE_MERC_OVERMATCHING = 0.9	# The AI will use up to this much of its warchest when trying to outnumber the enemy
	MIN_HIRING_GOAL = 700								# If missing less than this amount to outnumber its enemies, the AI will hire as if were actually missing this amount
	MAX_HIRING_GOAL_OVERFLOW_RATIO = 1.5				# The AI won't hire more than this times as many men as it is missing (using MERC_OVERMATCHING_TARGET). It'll hire the most expensive merc that fits within this. E.G., this means that if the AI is missing 1000 men, it'll hire the most expensive merc with less than 2000 men
	MONTHS_BEFORE_CONTRACT_END_TO_REHIRE = 3			# This many months before a merc contract ends, the AI will rehire mercs if it can afford it and thinks it still needs them
	PERCENTAGE_INTO_WAR_CHEST = 0.8						# When the war chest hasn't been filled, the AI will put this much of the money it earns into the war chest (reserved gold still gets filled first)


	MIN_GOALS_PER_STACK = 10							# Of all potential target goals found, each unit stack will only do a final evaluation, including pathfinding, on the top x ones.
	ARMY_SIZE_COMPARED_TO_SUPPLY = 10					# How much larger than the supply are we willing to make a stack? "Supply" here refers to the same number as MIN_SUPPLY_COMPARED_TO_AVERAGE_SUPPLY_FACTOR does
	RESUPPLY_MAX_DISTANCE = 3							# How far out can splinters of the army spread when trying to resupply? In # of provinces. AI will try to keep it lower if possible
	RESUPPLY_COOLDOWN_DAYS = 250						# If supplying is interrupted due to insufficient supply, wait for this long before trying to resupply again
	AVOID_BAD_ADJACENCY_COMBAT_PREDICTION_RATIO = 0.625	# Below this combat prediction ratio the AI will try to find a better way
	AVOID_BAD_ADJACENCY_MAX_PATHFIND_EXTRA_COST = 180.0	# Max additional cost for a path that avoids going over a bad adjacency just before the target destination
	POTENTIAL_PROVINCE_TARGET_ADJACENT_TO_FRIENDLY_SCORE = 100 # When deciding where to send its armies, locations that are adjacent to a friendly controlled county are given extra score
	PLAYER_SUPPORT_ATTACK_TARGET_MAX_DISTANCE = 400		# If the first enemy unit on the player unit's path is further away than this, the AI units in support will ignore it and instead find better things to do around the player unit
	
	PLAYER_SUPPORT_ATTACK_MAX_ARRIVAL_DELAY = 45		# Ignore to help out in the attack if estimated arrival is this many days after the combat starts
	PLAYER_SUPPORT_IGNORE_BAD_SUPPLY_WITHIN_STEPS = 4	# Ignore trying to re-route to avoid bad supply situations when within this many steps from the target province
	
	PLAYER_SUPPORT_ENEMY_STRENGTH_MULTIPLIER = 1.5		# The AI will overestimate enemy strength with this multiplier when calculating how many troops should support a player unit	
	PLAYER_SUPPORT_MIN_SIEGE_STRENGTH = 1.25				# The AI will try to add enought troops supporting a player unit to reach a total number that is higher than the largest enemy garrison times this number
	
	TARGET_SCORE_SUPPORT_PLAYER_ONE_STEP = 1000			# Added to score when supporting a player unit, and target province is one step away
	TARGET_SCORE_SUPPORT_PLAYER_TWO_STEP = 500			# Added to score when supporting a player unit, and target province is two steps away
	TARGET_SCORE_SUPPORT_PLAYER_THREE_STEP = 200		# Added to score when supporting a player unit, and target province is three steps away
	
	TARGET_SCORE_IS_SIEGING = 500						# Added to score if the specific AI unit evaluating is sieging the province
	TARGET_SCORE_WOULD_LIFT_SIEGE = 190					# Added to score if moving to this province would lift a siege
	TARGET_SCORE_WOULD_START_COMBAT = 180				# Added to score if moving to this province would start a combat
	TARGET_SCORE_WOULD_START_SIEGE = 70					# Added to score if moving to this province would start a siege

	MAX_DISTANCE_SCORE_CLOSE_TO_WAR_GOAL = 75			# At what point do we stop giving extra score to sieging provinces close to the war goal? In pixels added to the war goal radius
	TARGET_SCORE_CLOSE_TO_WAR_GOAL = 100		 			# Added to score if not a war goal province but close enough to the war goal area
	
	TARGET_SCORE_SAME_PROVINCE = 25						# Bonus to targets in same province as unit
	TARGET_SCORE_SAME_COUNTY = 150						# Bonus to targets in same county as unit
	TARGET_SCORE_SAME_COUNTY_AS_ENEMY_CAPITAL = 75		# Bonus to targets in same county as enemy capital if unit is in same or adjacent county
	TARGET_SCORE_NEIGHBOR_COUNTY = 100					# Bonus to targets in neighboring counties as unit
	
	TARGET_SCORE_CURRENT = 100							# Bonus to picking the current target
	TARGET_SCORE_FURTHER_AWAY = -100					# Malus to targets further away from the current target, than the unit are to the current target
	
	SPOUSE_SCORE_ALLIANCES_WANTED = 2					# Over this number, new alliances through marriage will not impact spouse score unless they are of a higher tier than the current highest tier alliance
	SPOUSE_SCORE_EXISTING_ALLIANCE_DIVIDER = 1.5		# If already allied, divide the alliance score with this	
}

NFaction = {
	CREATE_OPINION_THRESHOLD = 85						# An opinion below this value will give the chance of create a faction
	CREATE_MIN_SCORE = 5								# Minimum score value to try to create a faction
	JOIN_OPINION_THRESHOLD = 75							# An opinion below this value will give the chance of join a faction
	JOIN_MIN_SCORE = 5									# Minimum score value to try to join a faction
	LEAVE_SCORE_THRESHOLD = 5							# If the join score goes below this value the member will leave the faction
	DEMAND_EXTRA_THRESHOLD = 5							# The AI is going to wait ultil have a sum of power and demand greather than the thersholds + this value to press demands

	DREAD_MODIFIED_BOLDNESS_FACTOR = 1.0				# The effect of Boldness (modified by the liege's Dread) on the AI when considering creating or joining a Faction (Boldness can never make a negative evaluation score positive - it's a bad idea.)

	RATIONALITY_FACTOR = 1.0							# The effect of Rationality on the AI when considering creating or joining a Faction (Rationality can push the evaluation score below or above 0.)

	ENERGY_FACTOR = 1.0									# The effect of Energy on the AI when considering creating or joining a Faction (Energy/Lethargy can only increase or reduce an already positive evaluation score.)
}

NMarriage = {
	AGE_OF_MARRIAGE_MALE = 16
	AGE_OF_MARRIAGE_FEMALE = 16
	MAX_ALLIANCE_FAMILY_DISTANCE_SUM = 4						# How far can the married characters be related (a sum of both distances) to the arrangers in order for the arrangers to get alliances.
	LANDED_AI_DESCENDANTS_CANT_MARRY_YEARS = 1					# For how many years can't same-subrealm players' children and grandchildren marry after when they're landed

	SPOUSE_FINDER_RELEVANCE_PRESTIGE_GAIN_MULTIPLIER = 1 		# How much the prestige gain is valued for the relevance sorting of a marriage
	SPOUSE_FINDER_RELEVANCE_ALLIANCE_POWER_MULTIPLIER = 1.7 	# How much the alliance power is valued for the relevance sorting of a marriage
	SPOUSE_FINDER_RELEVANCE_GENERAL_SKILL_MULTIPLIER = 1.3 		# How much the total general skill is valued for the relevance sorting of a marriage
	SPOUSE_FINDER_RELEVANCE_INFERTILE_MODIFIER = -50000 		# Modifier applied to relevance sorting of a marriage if they are visibly infertile
	SPOUSE_FINDER_RELEVANCE_INFERTILE_MODIFIER_FEMALE_AGE = 35 	# At this age females will be considered old enough for the infertile modifier even if they are younger than the actual too old for children define, so we sort out those close to that define earlier
	SPOUSE_FINDER_RELEVANCE_AGE_DIFFERENCE_MULTIPLIER = -10 	# Multiplier on age difference applied to relevance sorting of a marriage if the age difference is greater than or equal to the below
	SPOUSE_FINDER_RELEVANCE_AGE_DIFFERENCE_CUTOFF = 20 			# The age difference between the two parties for the above modifier to be applied per year of difference
}
